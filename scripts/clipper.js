// scripts/clipper.js

(async function() {
  const API = 'http://localhost:4000';

  let menuEl = null;

  // ÌéòÏù¥ÏßÄ Ïñ¥ÎîîÎì† ÌÅ¥Î¶≠ÌïòÎ©¥ Î©îÎâ¥ Ï†úÍ±∞
  document.addEventListener('mousedown', (e) => {
      // Î©îÎâ¥Í∞Ä Îñ† ÏûàÍ≥†, ÌÅ¥Î¶≠Ìïú ÏöîÏÜåÍ∞Ä menuEl Î∞îÍπ•Ïù¥Î©¥ Ï†úÍ±∞
      if (menuEl && !menuEl.contains(e.target)) {
        menuEl.remove();
        menuEl = null;
      }
    });

  document.addEventListener('mouseup', async (e) => {

    const sel = window.getSelection();
    const text = sel.toString().trim();
    if (!text) return;

    // ÌòÑÏû¨ ÏÑ†ÌÉù ÏòÅÏó≠ ÏúÑÏπò Í≥ÑÏÇ∞
    const range = sel.getRangeAt(0);
    const rect = range.getBoundingClientRect();
    const x = rect.right + window.scrollX;
    const y = rect.bottom + window.scrollY;

    // Ï†ÄÏû•Ìï¥ Îëî projectId, jwt Í∫ºÎÇ¥Ïò§Í∏∞
    const { clipperEnabled, selectedProjectId, jwt } = await chrome.storage.local.get(
      ['clipperEnabled','selectedProjectId', 'jwt']
    );
    if (!clipperEnabled || !selectedProjectId || !jwt) {
      console.warn('No project selected or not logged in');
      return;
    }

    // Ìï¥Îãπ ÌîÑÎ°úÏ†ùÌä∏Ïùò ÌÉúÍ∑∏ Î™©Î°ù Î∂àÎü¨Ïò§Í∏∞
    let tags;
    try {
      const res = await fetch(
        `${API}/projects/${selectedProjectId}/tags`,
        { headers: { Authorization: `Bearer ${jwt}` } }
      );
      tags = await res.json();
    } catch (err) {
      console.error('Failed to load tags', err);
      return;
    }
    if(menuEl){
      menuEl.remove();
      menuEl = null;
    }

    // Î©îÎâ¥ Ïª®ÌÖåÏù¥ÎÑà - ÏµúÏÜå ÌÅ¨Í∏∞Î°ú Ïª¥Ìå©Ìä∏ÌïòÍ≤å
    menuEl = document.createElement('div');
    Object.assign(menuEl.style, {
      position: 'absolute',
      top: `${y + 2}px`,
      left: `${x + 2}px`,
      background: 'rgba(255, 255, 255, 0.98)',
      backdropFilter: 'blur(20px)',
      border: '1px solid rgba(59, 130, 246, 0.2)',
      padding: '4px',
      borderRadius: '8px',
      boxShadow: '0 4px 12px rgba(0, 0, 0, 0.15)',
      zIndex: 2147483647,
      display: 'flex',
      flexWrap: 'wrap',
      gap: '3px',
      maxWidth: '200px',
      fontSize: '10px',
      fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif'
    });

    // Ìó§Îçî Ï†úÍ±∞ - Í≥µÍ∞Ñ Ï†àÏïΩ

    // ÌÉúÍ∑∏ Ïª®ÌÖåÏù¥ÎÑà
    const tagContainer = document.createElement('div');
    Object.assign(tagContainer.style, {
      display: 'flex',
      flexWrap: 'wrap',
      gap: '2px',
      width: '100%'
    });

    // Í∞Å ÌÉúÍ∑∏ Î≤ÑÌäº ÎßåÎì§Í∏∞ - ÎØ∏Îãà ÏÇ¨Ïù¥Ï¶à
    tags.forEach((tag) => {
      const btn = document.createElement('button');
      btn.textContent = tag.name;
      
      Object.assign(btn.style, {
        background: 'linear-gradient(135deg, #3b82f6, #1d4ed8)',
        border: 'none',
        borderRadius: '10px',
        padding: '3px 6px',
        fontSize: '10px',
        fontWeight: '600',
        color: 'white',
        cursor: 'pointer',
        transition: 'all 0.2s ease',
        boxShadow: '0 1px 4px rgba(59, 130, 246, 0.3)',
        whiteSpace: 'nowrap',
        userSelect: 'none',
        lineHeight: '1'
      });

      // Ìò∏Î≤Ñ Ìö®Í≥º - Îçî ÏûëÍ≤å
      btn.addEventListener('mouseenter', () => {
        btn.style.transform = 'translateY(-1px) scale(1.03)';
        btn.style.boxShadow = '0 2px 6px rgba(59, 130, 246, 0.4)';
      });

      btn.addEventListener('mouseleave', () => {
        btn.style.transform = 'translateY(0) scale(1)';
        btn.style.boxShadow = '0 1px 4px rgba(59, 130, 246, 0.3)';
      });

      // ÌÅ¥Î¶≠ Ìö®Í≥º
      btn.addEventListener('mousedown', () => {
        btn.style.transform = 'translateY(0) scale(0.97)';
      });

      btn.addEventListener('click', async () => {
        console.log('ÌÅ¥Î¶Ω Ï†ÄÏû• ÏãúÎèÑ');
        
        // Î°úÎî© ÏÉÅÌÉú ÌëúÏãú
        const originalText = btn.textContent;
        btn.textContent = 'üíæ';
        btn.style.opacity = '0.7';
        btn.style.cursor = 'wait';
        
        try {
          const saveRes = await fetch(
            `${API}/projects/${selectedProjectId}/clips`,
            {
              method: 'POST',                                   
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${jwt}`               
              },
              body: JSON.stringify({                             
                  tag:     tag.name,
                  url:     window.location.href,
                  content: text,
              }),
            }
          );
          if (!saveRes.ok) throw new Error(saveRes.statusText);
          const newClip = await saveRes.json();
          console.log('Ï†ÄÏû• ÏÑ±Í≥µ');

          // ÏÑ±Í≥µ ÌîºÎìúÎ∞±
          btn.textContent = '‚úÖ';
          btn.style.background = 'linear-gradient(135deg, #10b981, #047857)';
          
          setTimeout(() => {
            chrome.runtime.sendMessage({
                type: 'CLIP_SAVED',
                projectId: selectedProjectId,
                clip: newClip
            });
            
            if (menuEl) {
              menuEl.remove();
              menuEl = null;
            }
          }, 600);

        } catch (err) {
          console.error('Failed to save clip', err);
          
          // ÏóêÎü¨ ÌîºÎìúÎ∞±
          btn.textContent = '‚ùå';
          btn.style.background = 'linear-gradient(135deg, #ef4444, #dc2626)';
          
          setTimeout(() => {
            btn.textContent = originalText;
            btn.style.opacity = '1';
            btn.style.cursor = 'pointer';
            btn.style.background = 'linear-gradient(135deg, #3b82f6, #1d4ed8)';
          }, 1200);
        }
      });

      tagContainer.appendChild(btn);
    });

    // "ÌÉúÍ∑∏ ÏóÜÏùå" Î≤ÑÌäº - ÎØ∏Îãà ÏÇ¨Ïù¥Ï¶à
    const noTagBtn = document.createElement('button');
    noTagBtn.textContent = 'ÌÉúÍ∑∏ÏóÜÏùå';
    Object.assign(noTagBtn.style, {
      background: 'rgba(148, 163, 184, 0.8)',
      border: '1px solid rgba(148, 163, 184, 0.3)',
      borderRadius: '10px',
      padding: '3px 6px',
      fontSize: '10px',
      fontWeight: '600',
      color: '#475569',
      cursor: 'pointer',
      transition: 'all 0.2s ease',
      whiteSpace: 'nowrap',
      userSelect: 'none',
      lineHeight: '1'
    });

    noTagBtn.addEventListener('mouseenter', () => {
      noTagBtn.style.background = 'rgba(148, 163, 184, 1)';
      noTagBtn.style.color = 'white';
      noTagBtn.style.transform = 'translateY(-1px)';
    });

    noTagBtn.addEventListener('mouseleave', () => {
      noTagBtn.style.background = 'rgba(148, 163, 184, 0.8)';
      noTagBtn.style.color = '#475569';
      noTagBtn.style.transform = 'translateY(0)';
    });

    noTagBtn.addEventListener('click', async () => {
      console.log('ÌÉúÍ∑∏ ÏóÜÏù¥ ÌÅ¥Î¶Ω Ï†ÄÏû•');
      
      const originalText = noTagBtn.textContent;
      noTagBtn.textContent = 'üíæ';
      
      try {
        const saveRes = await fetch(
          `${API}/projects/${selectedProjectId}/clips`,
          {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${jwt}`
            },
            body: JSON.stringify({
              url: window.location.href,
              content: text,
            }),
          }
        );
        if (!saveRes.ok) throw new Error(saveRes.statusText);
        const newClip = await saveRes.json();

        noTagBtn.textContent = '‚úÖ';
        noTagBtn.style.background = 'linear-gradient(135deg, #10b981, #047857)';
        noTagBtn.style.color = 'white';

        setTimeout(() => {
          chrome.runtime.sendMessage({
            type: 'CLIP_SAVED',
            projectId: selectedProjectId,
            clip: newClip
          });
          
          if (menuEl) {
            menuEl.remove();
            menuEl = null;
          }
        }, 600);

      } catch (err) {
        console.error('Failed to save clip', err);
        noTagBtn.textContent = '‚ùå';
        noTagBtn.style.background = 'linear-gradient(135deg, #ef4444, #dc2626)';
        noTagBtn.style.color = 'white';
      }
    });

    tagContainer.appendChild(noTagBtn);
    menuEl.appendChild(tagContainer);
    document.body.appendChild(menuEl);
  });
})();